buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
        mariadbConnectorVersion = '2.2.1'
        springSessionVersion = '1.3.1.RELEASE'
        springSecurityOAuth2Version = '2.0.14.RELEASE'
        apacheCommonsLang3Version = '3.7'
		aeroGearOtpVersion = '1.0.0'
        lombokVersion = '1.16.18'
        restAssuredVersion = '3.0.3'
        springSecurityVersion = '4.2.3'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'

group = 'com.example'
sourceCompatibility = 1.8

def profile = System.properties['spring.profiles.active']

project.gradle.projectsEvaluated {
	if (profile == null) {
		profile = 'local'
	}

	applicationDefaultJvmArgs = applicationDefaultJvmArgs + ["-Dspring.profiles.active=${profile}"]
}

repositories {
	mavenCentral()
}

ext['hibernate.version'] = '5.2.10.Final' //Spring Boot Overriding

dependencies {
	compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	compile("org.springframework.security.oauth:spring-security-oauth2:${springSecurityOAuth2Version}")
    compile("org.springframework.session:spring-session:${springSessionVersion}")
    compile("org.apache.commons:commons-lang3:${apacheCommonsLang3Version}")
	compile("org.jboss.aerogear:aerogear-otp-java:${aeroGearOtpVersion}")

    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    runtime("org.mariadb.jdbc:mariadb-java-client:${mariadbConnectorVersion}")

	compileOnly("org.projectlombok:lombok:${lombokVersion}")

	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	testCompile("org.springframework.security:spring-security-test:${springSecurityVersion}")
    testCompile("io.rest-assured:rest-assured:${restAssuredVersion}") // Rest API Test
}

bootRun {
	systemProperty['file.encoding'] = 'UTF-8'
}